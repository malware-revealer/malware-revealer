import requests as req
import importlib
import models
import json
import os
import torch
from torchvision import transforms
from PIL import Image
from io import BytesIO


MODEL_STORE = "models-data"
EXTRACTION_ENDPOINT = "http://extractor/extract"


def download_image(url):
    """
    Download the image using the url provided, create a Pillow image from it
    and returns it.
    """
    resp = req.get(url)
    buffer = BytesIO(resp.content)
    image = Image.open(buffer)
    return image


class MalwareRevealer():

    def __init__(self, version):
        model_version_dir = os.path.join(MODEL_STORE, version)
        self.extractor_conf = model_version_dir + "/extractor_conf.yaml"
        self.model = models.new(version)
        self.version = version


    def get_features_(self, exec):
        files = {
            'exec': exec,
            'extractor_conf': open(self.extractor_conf, 'rb')
        }
        resp = req.post(EXTRACTION_ENDPOINT, files=files)

        return resp


    def get_features(self, exec):
        """
        Should get the features from the appropriate attr according to
        the extractor used.
        """
        raise NotImplementedError()


    def predict(self, features):
        raise NotImplementedError()


class MalwareRevealerCnn(MalwareRevealer):

    def __init__(self, version):
        super().__init__(version)
        self.categories = ['benign', 'malware']
        self.data_transform = transforms.Compose(
            [
                transforms.Resize(224),
                transforms.ToTensor(),
            ]
        )


    def get_features(self, exec):
        response = self.get_features_(exec)
        json_data = json.loads(response.text)
        image_url = json_data['image_urls']['binary_image']
        image = download_image(image_url)

        return image


    def predict(self, image):
        image = image.convert("RGB")
        image_tensor = self.data_transform(image)
        image_tensor = image_tensor.unsqueeze(0)
        with torch.no_grad():
            out = self.model(image_tensor)
            probs = out[0]
            probs = probs.softmax(0)

        cats = self.categories
        probs_cats = {cat: float(prob) for prob,cat in zip(probs, cats)}

        return probs_cats


def new(version):
    if version.startswith('cnn'):
        return MalwareRevealerCnn(version)
    else:
        return None
