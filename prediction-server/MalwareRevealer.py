from torchvision.models import squeezenet1_1
from torch import nn
import torch

def new(state_dict_path="saved_models_state_dicts/v1.pth"):
    """
    Return the trained MalwareRevealer model.
    """

    model = squeezenet1_1()
    # Customizing the squeezenet architecture
    features = list(model.classifier.children())
    features[1] = nn.Conv2d(model.classifier[1].in_channels,2,kernel_size=(1,1))
    model.classifier = nn.Sequential(*features)
    model.num_classes = 2
    # Load the trained model
    device = ('cuda' if torch.cuda.is_available() else 'cpu')
    model.load_state_dict(torch.load(state_dict_path, map_location=device))
    # Set the model to evaluation mode
    model.eval()
    for param in model.parameters():
        param.requires_grad = False

    return model
