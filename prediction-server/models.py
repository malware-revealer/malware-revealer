from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier
from torchvision.models import squeezenet1_1
from torch import nn
import torch
import os
from sklearn.externals import joblib


MODEL_STORE = "models-data"


def new_cnn_v1():
    """
    Instanciate a new CNN Classifier based on squeezenet. This model have been
    trained on our malware dataset (provided by VirusTotal).
    """

    model = squeezenet1_1()
    # Customizing the squeezenet architecture
    features = list(model.classifier.children())
    features[1] = nn.Conv2d(model.classifier[1].in_channels,2,kernel_size=(1,1))
    model.classifier = nn.Sequential(*features)
    model.num_classes = 2
    # Load the trained model
    device = ('cuda' if torch.cuda.is_available() else 'cpu')
    checkpoint_file = os.path.join(MODEL_STORE, 'cnn-v1', 'cnn-v1.pth')
    state_dict = torch.load(checkpoint_file, map_location=device)['state_dict']
    model.load_state_dict(state_dict)
    # Set the model to evaluation mode
    model.eval()
    for param in model.parameters():
        param.requires_grad = False

    return model
def new_LogisticRegression_v1():
    file_path = os.path.join(MODEL_STORE, 'LogisticRegression-v1', 'LogisticRegression.sav')
    model =  joblib.load(file_path)
    return model



MODELS = {
    'cnn-v1': new_cnn_v1,
    'LogisticRegression-v1': new_LogisticRegression_v1
}


def new(version):
    try:
        model_builder = MODELS[version]
        model = model_builder()
    except KeyError:
        # TODO: print clear warning
        print("Can't find a model with version %s" % version)
    return model

